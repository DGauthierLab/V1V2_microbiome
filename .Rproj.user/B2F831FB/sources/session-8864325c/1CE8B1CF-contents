#### INITIALIZATION ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

#install.packages("ggtext")
library(tidyverse)
library(janitor)
library(readxl)
library(lubridate)
library(ggtext)
#download.packages(MASS)
library(MASS)
require(maps)
require(viridis)

#### USER DEFINED VARIABLES ####

inFilePath = "./halichores_scapularis_measurements_bartlett_2.xlsx"
read_excel(inFilePath)
library(readxl)
inFilePath2 = "./halichores_scapularis_measurements_bartlett_2.txt"
location_data <- read_tsv(inFilePath2) %>%
  clean_names()

# outFilePath = "./data_combined.tsv"

#### READ IN DATA & CURATE ####

data <-
  read_excel(inFilePath,
             na="NA") %>%
  clean_names() %>%
  # remove individuals with no length data
  filter(!is.na(total_length_mm) | !is.na(standard_length_mm)) %>%
  # sex & stage needs to be cleaned, and primary needs to be split out
  mutate(date = ymd(date),
         weight_g = as.numeric(weight_g),
         weight_of_gonads_g = as.numeric(weight_of_gonads_g),
         stage = str_to_title(stage),
         sex_clean = case_when(stage == "PM?" | stage == "Primary M" ~ "PM" ,
                              sex == "Juvenile" ~ "U",
                               sex == "?" ~ "U",
                               sex == "F?" ~ "U",
                               sex == "inbetween" ~ "MF",
                               sex == "Transitional" ~ "MF",
                               TRUE ~ sex),
         change = case_when(sex_clean == "M" ~ "1",
                            sex_clean == "MF" ~ NA_character_,
                            sex_clean == "F" ~"0",
                            sex_clean == "PM" ~ NA_character_,
                            sex == "Juvenile" | sex == "J" ~ NA_character_,
                            sex_clean == "U" ~ NA_character_,
                            TRUE ~ sex_clean),
         change = as.numeric(change),
         change2 = case_when(sex_clean == "M" ~ "1",
                            sex_clean == "MF" ~ NA_character_,
                            sex_clean == "F" ~"0",
                            sex_clean == "PM" ~NA_character_,
                            sex == "Juvenile" | sex == "J" ~ NA_character_,
                            sex_clean == "U" ~ NA_character_,
                            TRUE ~ sex_clean),
         sex_clean = factor(sex_clean,
                            levels = c("U",
                                       "F",
                                       "MF",
                                       "M", 
                                       "PM")),
         stage_clean = case_when(stage == "Juvenile" ~ "0",
                                 stage == "J" ~ "0",
                                 stage == "Inactive" & sex_clean == "M" ~ "5.5",
                                 stage == "Primary M" ~ "6",
                                 stage == "Active" & sex_clean == "M" ~ "5",
                                 stage == "Pm?" ~ "6",
                                 stage == "?" ~ NA_character_,
                                 TRUE ~ stage),
         #stage_clean = as.numeric(stage_clean),
         primary = case_when(str_detect(stage,
                                        "Primary") ~ TRUE,
                             TRUE ~ FALSE)) 
  # mutate(female_male = case_when(sex_clean == "F" ~ 0,
  #                                sex_clean == "M" ~ 1),
  #        # because our response variable is binomial (0,1), need to make count columns for the two outcomes for the stats command that requires binoial data to be fed in this way
  #        f_count = case_when(female_male == 0 ~ 1,
  #                            TRUE ~ 0),
  #        m_count = case_when(female_male == 1 ~ 1,
  #                            TRUE ~ 0),
  #        # make the fixed predictor variable a  factor
  #        # location = factor(location)
  # ) %>%
  # drop_na(female_male)


  
glm_fit<-glm(change~total_length_mm, family="binomial", data=data, na.action=na.omit)
lmdata<- data.frame(total_length_mm=seq(min(data$total_length_mm), max(data$total_length_mm), len=200))
lmdata$probchange = predict(glm_fit, lmdata, type="response")
plot(change ~ total_length_mm, data=data, col="blue", 
     main = "The Probability of Sex Change Given the Total Length", 
     xlab = "Total Length (mm)",
     ylab = "P(Sex Change)") 
lines(probchange ~ total_length_mm, lmdata, lwd=2)
LD50 <- dose.p(glm_fit, p = 0.5)
abline(v = LD50[[1]])



geom_vline(xintercept = LD50[[1]])

OR <-exp(cbind(OR = coef(glm_fit), confint(glm_fit)))

#dont use
glm_fit2<-glm(change~location + total_length_mm, family="binomial", data=data, na.action=na.exclude)

OR2 <-exp(cbind(OR = coef(glm_fit2), confint(glm_fit2)))
#dont use


# metadata <-
#   read_excel(inFilePath2,
#              na="NA") %>%
#   clean_names() %>%
#   rename(bait_weight_grams = weight_grams)

#### COMBINE DATA ####

# data_all <-
#   data %>%
#     left_join(metadata,
#                by = c("op_code" = "opcode",
#                       "depth_m" = "depth_m")) %>%
#   # rearrange order of columns, metadata then data
#   select(op_code,
#          site:long_e,
#          depth_m,
#          time_in:bait_weight_grams,
#          everything())

#### WRITE LONG FORMAT FILE ####

# data_all %>%
#   write_tsv(outFilePath)

#### VISuALIZE METADATA ####

# metadata %>%
#   ggplot(aes(x=depth_m,
#              fill = habitat)) +
#   geom_histogram() +
#   theme_classic() 
# ggsave("histogram_depth-x-habitat.png")
# 
# metadata %>%
#   ggplot(aes(x=depth_m,
#              fill = habitat)) +
#   geom_histogram() +
#   theme_classic() +
#   facet_grid(bait_type ~ bait_weight_grams)
# ggsave("histogram_depth-x-habitat-x-bait.png")
# 
# metadata %>%
#   ggplot(aes(x=habitat,
#              y=survey_length_hrs,
#              fill = habitat)) +
#   # geom_violin() +
#   geom_boxplot() +
#   theme_classic() 
# 
# metadata %>%
#   ggplot(aes(x=lat_n,
#              y=long_e,
#              color = habitat)) +
#   geom_point(size = 5) +
#   theme_classic() 

#### VISUALIZE DATA ####

# points that deviate substantially from the best fit line potentially indicate errors in the lengths, these should be double checked
pdf("figures_1.pdf") 

data %>%
  ggplot(aes(x=standard_length_mm,
             y=total_length_mm)) +
  geom_point(size = 3) +
  geom_smooth() +
  theme_classic() +
  xlab("Standard Length (mm)") +
  ylab("Total Length (mm)") +
  theme(plot.title = ggtext::element_markdown(hjust=0.5, lineheight = 1.1)) +
  labs(title = ("*H. scapularis* Standard Length (g) <br> vs. Total Length (mm) by Location")) +
  facet_grid(location ~ .) 

data %>%
  ggplot(aes(x=total_length_mm,
             y=weight_g)) +
  geom_point(size = 3) +
  #geom_smooth() +
  theme_classic() +
  xlab("Total Length (mm)") +
  ylab("Weight (g)") +
  labs(title = expression(italic(H.~scapularis)~Standard~Length~(mm)~vs.~Weight~(g)~by~Location)) +
  facet_grid(location ~ .)

logl <- log(data$total_length_mm)
logw <- log(data$weight_g)

ggplot(lmdata2,xlab="Log Total Length (mm)",ylab="Log Weight (g)",main="Log Total Length (mm) vs. Log Weight (g)")

data %>%
  ggplot(aes(x=logl,
             y=logw)) +
  geom_point(size = 3) +
  #geom_smooth() +
  theme_classic() +
  xlab("Log Total Length (mm)") +
  ylab("Log Weight (g)") +
  labs(title = expression(italic(H.~scapularis)~Log~Standard~Length~(mm)~vs.~Log~Weight~(g)~by~Location)) +
  facet_grid(location ~ .)

library("ggplot2")
eq = function(x){x*x}
ggplot(data.frame(x=c(1, 50)), aes(x=x)) + 
   stat_function(fun=eq)

eq = function(x){.0000041*(x^3.3)}

data %>%
  ggplot(aes(x=total_length_mm,
             y=weight_g)) +
  geom_point(size = 3) +
  #geom_smooth() +
  theme_classic() +
  xlab("Total Length (mm)") +
  ylab("Weight (g)") +
  labs(title = expression(italic(H.~scapularis)~Standard~Length~(mm)~vs.~Weight~(g)~by~Location)) +
  facet_grid(location ~ .) +
# data.frame(x=c(60, 160), 
           # aes(x=x) + 
  stat_function(fun=eq)

#equation logw=-12.4159+3.2966*logl 
W=L^3.2966

data %>%
  filter(sex_clean=="F") %>%
  ggplot(aes(x=weight_g,
             y=weight_of_gonads_g)) +
  geom_point(size = 3) +
  geom_smooth() +
  theme_classic() +
  theme(plot.title = ggtext::element_markdown(hjust=0.5, lineheight = 1.1)) +
  labs(title = ("*H. scapularis* Female Weight (g) <br> vs. Female Weight of Gonads (g)")) +
  xlab("Weight (g)") +
  ylab("Weight of Gonads (g)") +
  
  facet_grid(location ~ .)
#dev.off()



#color code weight vs. standard length by change

data %>%
  #filter(female_male) %>%
  #filter(change=="F", 
         #change=="M") %>%
  ggplot(aes(x=total_length_mm,
             y=weight_g, 
             color = change2)) +
  geom_point(size = 3) +
  #geom_smooth() +
  theme_classic() +
  xlab("Total Length (mm)") +
  ylab("Mass (g)") +
  theme(plot.title = ggtext::element_markdown(hjust=0.5, lineheight = 1.1, size = 22)) +
  labs(title = ("*H. scapularis* Standard Length (mm) <br> vs. Mass (g) by Location"), 
       color="Sex Change") +
  theme(axis.title = element_text(size = 18), 
  axis.text = element_text(size = 10),
  strip.text.y = element_text(size=12), 
  legend.text = element_text(size=12),
  legend.title=element_text(size=12)) +
  facet_grid(location ~ .) +
  stat_function(fun=eq,
                color="black")
s#italic(H.~scapularis)~Standard~Length~(mm)~vs.~Mass~(g)~by~Location
#labs(title = ("*H. scapularis* Standard Length (g) <br> vs. Total Length (mm) by Location"))

#color code weight vs. standard length by change

#color sites instead of paneling

data %>%
  filter(sex_clean=="F") %>%
  ggplot(aes(x=weight_g,
             y=weight_of_gonads_g,
             group=location, 
             color=location,
             shape=as.factor(stage_clean))) +
  geom_point(size = 3) +
  #geom_point(aes(color=as.factor(stage_clean), shape = location)) +
  geom_smooth(aes(fill=location),
              method = "lm",
              formula=y~x^3) +
  theme_classic() +
  xlab("Weight (g)") +
  ylab("Weight of Gonads (g)") +
  labs(title = expression(italic(H.~scapularis)~Female~Weight~(g)~vs.~Female~Weight~of~Gonads~(g)~by~Location),
       fill = "Location",
       color = "Location",
       shape = "Stage") 

#statistics start

glm_fit <- glm(weight_of_gonads_g ~ location, family = gaussian, data=data)
summary(glm_fit)

glm_fit <- glm(weight_of_gonads_g~weight_g*location, data=data_F)
summary(glm_fit)

data_F <- data %>%
  filter(sex_clean=="F") %>%
mutate(percent_gonad_weight = (100 * weight_of_gonads_g / weight_g))


  ggplot(aes(y=weight_of_gonads_g, 
             x=location)) +
  geom_boxplot() 
  
  data_F %>%
    ggplot(aes(x=total_length_mm,
               y=percent_gonad_weight,
               group=location, 
               color=location,
               shape=as.factor(stage_clean))) +
    geom_point(size = 3) +
    #geom_point(aes(color=as.factor(stage_clean), shape = location)) +
    geom_smooth(aes(fill=location),
                method = "lm",
                formula=y~x^3) +
    theme_classic() +
    xlab("Total Length (mm)") +
    ylab("Percent Mass of Ovaries") +
    theme(plot.title = ggtext::element_markdown(hjust=0.5, lineheight = 1.1, size = 22))  +
    labs(title =("*H. scapularis* Percent Mass of Ovaries vs. <br> Total Length (mm) by Location"),
         fill = "Location",
         color = "Location",
         shape = "Stage") +
  theme(axis.title = element_text(size = 18),
        legend.title=element_text(size=12), 
        axis.text = element_text(size = 10),
        legend.text = element_text(size=12)) +
    scale_fill_manual(values=c("#00BA38", "#F8766D", "#619CFF")) +
    scale_color_manual(values=c("#00BA38", "#F8766D", "#619CFF")) 
    
  
  #theme(plot.title = ggtext::element_markdown(hjust=0.5, lineheight = 1.1)) +
  #labs(title = ("*H. scapularis* Standard Length (g) <br> vs. Total Length (mm) by Location")) +

#expression(italic(H.~scapularis)~Percent~Weight~of~Gonads~(g)~vs./n~Total~Length~(g)~In~Female~Individuals~by~Location

geom_point(shape=1,size=3,color="black") 
#geom_point(aes(color=location)) +
 # scale_color_manual(values=c("gold", "coral", "lightskyblue")) +
  #geom_smooth(aes(color=location)) +
  #scale_color_manual(values=c("gold", "coral", "lightskyblue")) +
  #geom_smooth(aes(fill=location)) +
  #scale_fill_manual(values=c("gold", "coral", "lightskyblue")) +
#color sites instead of paneling

data %>%
  ggplot(aes(x=standard_length_mm,
             y=weight_of_gonads_g,
             color = sex_clean)) +
  geom_point(size = 3) +
  geom_smooth(method = "lm",
              se = FALSE) +
  geom_smooth(aes(x=standard_length_mm,
                  y=weight_of_gonads_g,
                  color = standard_length_mm),
              color = "black") +
  theme_classic() +
  facet_grid(location ~ .)

data %>%
  ggplot(aes(x=total_length_mm,
             y=weight_g)) +
  geom_point(size = 3) +
  geom_smooth() +
  theme_classic() +
  facet_grid(location ~ .)

data %>%
  ggplot(aes(y=standard_length_mm,
             x=sex_clean,
             fill = sex_clean)) +
  geom_boxplot() +
  theme_classic() +
  facet_grid(. ~ location)

# what defines a primary male? Here, there are males not identified as primary that are smaller than those identified as primary.  Also note the those identified as primary are longer than those identified as MF
data %>%
  ggplot(aes(y=standard_length_mm,
             x=sex_clean,
             fill = sex_clean)) +
  geom_boxplot() +
  theme_classic() +
  facet_grid(. ~ location + primary,
             scales = "free_x")

data %>%
  ggplot(aes(y=total_length_mm,
             x=sex_clean,
             fill = sex_clean)) +
  geom_boxplot() +
  theme_classic() +
  facet_grid(. ~ location)

data %>%
  ggplot(aes(y=weight_g,
             x=sex_clean,
             fill = sex_clean)) +
  geom_boxplot() +
  theme_classic() +
  facet_grid(. ~ location)


data %>% 
  pivot_longer(cols = c(total_length_mm, 
                        standard_length_mm, 
                        weight_g, 
                        weight_of_gonads_g)) %>%
  ggplot(aes(y=value,
             x=sex_clean,
             fill = sex_clean)) +
  geom_boxplot() +
  theme_classic() +
  facet_wrap(. ~ location + name,
             scales = "free_y")

data %>%
  ggplot(aes(x=standard_length_mm,
             y=stage_clean,
             color = sex_clean)) +
  geom_point(size = 3) +
  theme_classic() +
  facet_grid(. ~ location)

#Map stuff
#### INITIALIZATION ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

library(tidyverse)
library(janitor)
# install.packages("maps")
# install.packages("viridis")
require(maps)
require(viridis)
theme_set(
  theme_void()
)
install.packages("ggthemes")
library(ggthemes)

#### USER DEFINED VARIABLES ####

inFilePath1 = "metadata.rds"


#### READ IN DATA####

read_rds(inFilePath)


#### SIMPLE MAP OF SITE LOCATIONS ####
location_data %>%
  ggplot(aes(x=longitude,
             y=latitude,
             color = sub_location,
             shape = sub_location)) +
  geom_point(size = 3)

#### MAP OF WORLD USING MAPS PKG ####
#https://www.datanovia.com/en/blog/how-to-create-a-map-using-ggplot2/

world_map <- map_data("world")

world_map %>%
  ggplot(aes(x = long, 
             y = lat, 
             group = group)) +
  geom_polygon(fill="tan", 
               color = "brown4")

#### MAP OF ONE REGION USING MAPS PKG ####
map_data("world",
         region = "Philippines") %>%
  ggplot(aes(x = long, 
             y = lat,
             group = group)) +
  geom_polygon(fill="lightgray",
               colour = "black") 

#### MAP OF ONE REGION USING MAPS PKG, ONLY NAME SOME SUBREGIONS, INCLUDE SURVEY SITES FROM METADATA ####

subregion_label_data <- 
  map_data("world",
           region = "Philippines") %>%
  dplyr::group_by(subregion,
                  group) %>%
  dplyr::summarize(long = mean(long), 
                   lat = mean(lat)) %>%
  filter(subregion == "Negros" |
           subregion == "Cebu")

region_label_data <- 
  map_data("world",
           region = "Philippines") %>%
  dplyr::group_by(region) %>%
  dplyr::summarize(long = mean(long), 
                   lat = mean(lat))

map_data("world",
         region = "Philippines") %>%
  ggplot(aes(long,
             lat,
             group=group)) +
  geom_polygon(fill="lightgray",
               color = "black") +
  # subregion names
  geom_text(data = subregion_label_data,
            aes(label = subregion),
            size = 6,
            hjust = 0.5) +
  # region names
  geom_text(data = region_label_data,
            aes(x = long,
                y= lat,
                label = region),
            size = 10,
            hjust = 0.5,
            inherit.aes = FALSE) +
  # this next block is where the data points are added from metadata
  geom_point(data = location_data,
             aes(x = longitude,
                 y = latitude,
                 color = sub_location),
             inherit.aes = FALSE) +
  theme_classic()


#### zoom in on a set of subregions within a region ####

# define window
minLat = 7
minLong = 119
maxLat = 12
maxLong = 122.5

# make vector of unique subregions within window
subregions_keep <-
  map_data("world") %>%
  filter(long > minLong,
         long < maxLong,
         lat > minLat,
         lat < maxLat) %>%
  distinct(subregion) %>%
  pull()

# filter world map down to only the subregions
subregions_keep %>%
  purrr::map_df(~ map_data("world") %>%
                  filter(subregion == .x)) %>%
  # change lat and long values in keeper subregions that fall outside window to the window boundaries, prevents whacky shapes
  mutate(lat = case_when(lat < minLat ~ minLat,
                         lat > maxLat ~ maxLat,
                         TRUE ~ lat),
         long = case_when(long < minLong ~ minLong,
                          long > maxLong ~ maxLong,
                          TRUE ~ long)) %>%
  ggplot(aes(long,
             lat,
             group=group)) +
  # don't set color, otherwise you might get lines at the edges of the window
  geom_polygon(fill="green4") +
  geom_text(aes(x = 121,
                y= 8,
                label = "Sulu Sea"),
            size = 10,
            hjust = 0.5,
            inherit.aes = FALSE) +
  geom_point(data = location_data,
             aes(x = longitude,
                 y = latitude,
                 color = sub_location),
             inherit.aes = FALSE) +
  theme_classic()

#### set map completely by lat and long for regions and subregions within the window ####
pdf("map.pdf") 

minLat = 9.0
minLong = 122.5
maxLat = 10.25
maxLong = 124.5

regions_keep <-
  map_data("world") %>%
  filter(long > minLong,
         long < maxLong,
         lat > minLat,
         lat < maxLat) %>%
  distinct(region) %>%
  pull()

subregions_keep <-
  map_data("world") %>%
  filter(long > minLong,
         long < maxLong,
         lat > minLat,
         lat < maxLat) %>%
  distinct(subregion) %>%
  pull()

subregion_label_data <- 
  map_data("world") %>%
  filter(long > minLong,
         long < maxLong,
         lat > minLat,
         lat < maxLat) %>%
  dplyr::group_by(subregion) %>%
  dplyr::summarize(long = mean(long), 
                   lat = mean(lat))

map_data_regions <- 
  regions_keep %>%
  purrr::map_df(~ map_data("world") %>%
                  filter(region == .x))

subregions_keep %>%
  purrr::map_df(~ map_data_regions %>%
                  filter(subregion == .x)) %>%
  
  mutate(lat = case_when(lat < minLat ~ minLat,
                         lat > maxLat ~ maxLat,
                         TRUE ~ lat),
         long = case_when(long < minLong ~ minLong,
                          long > maxLong ~ maxLong,
                          TRUE ~ long)) %>%
  ggplot(aes(long,
             lat,
             group=group)) +
  geom_polygon(fill="lightgray") +
  geom_point(data = location_data,
             aes(x = longitude,
                 y = latitude,
                 color = sub_location,
                 shape = sub_location),
             inherit.aes = FALSE,
             size=9) +
  # region names
  geom_text(data = subregion_label_data,
            aes(x = long,
                y= lat,
                label = subregion),
            size = 10,
            hjust = 0.5,
            inherit.aes = FALSE) +
  # geom_text(aes(x = 121,
  #               y= 8,
  #               label = "Sulu Sea"),
  #           size = ,
  #           hjust = 0.5,
  #           color = "grey20",
  #           inherit.aes = FALSE) +
  
  xlab("Longitude") +
  ylab("Latitude") +
  labs(title ="Sample Collection Sites", 
       color = "Site Location",
       shape = "Site Location") +
  #theme(plot.title = element_text(size=10),
        #ggtext::element_markdown(hjust=0.5, lineheight = 1.1), 
        #axis.title.x = element_text(size=24),
        #axis.title.y = element_text(size=24))+
  theme_classic(
    base_size=24)
dev.off()

tabyl(data, location, sex_clean)


# 
# data %>%
#   group_by(pipettor,
#            channel,
#            trial) %>%
#   summarize(mean_mass_g = mean(mass_g),
#             sd_mass_g = sd(mass_g)) %>%
#   ggplot(aes(x=channel,
#              y=mean_mass_g,
#              color = pipettor)) +
#   geom_point() +
#   geom_errorbar(aes(ymin=mean_mass_g - sd_mass_g,
#                     ymax = mean_mass_g + sd_mass_g)) +
#   geom_hline(yintercept = 0.013,
#              color = "grey",
#              linetype = "dashed") +
#   theme_classic() +
#   facet_grid(trial ~ pipettor,
#              scales = "free_x")
# ggsave("mean-mass_vs_channel_x_pipettor.png")
# 
# data %>%
#   ggplot(aes(x=order,
#              y=mass_g,
#              color = pipettor)) +
#   geom_point() +
#   geom_smooth() +
#   geom_hline(yintercept = 0.013,
#              color = "grey",
#              linetype = "dashed") +
#   theme_classic() +
#   facet_grid(. ~ trial,
#              scales = "free_x")
# ggsave("mass_vs_order_x_pipettor.png")
# 
# data %>%
#   group_by(pipettor,
#            channel,
#            trial) %>%
#   summarize(mean_mass_g = mean(mass_g),
#             sd_mass_g = sd(mass_g),
#             order = min(order)) %>%
#   ggplot(aes(x=order,
#              y=sd_mass_g,
#              color = pipettor)) +
#   geom_point() +
#   geom_smooth() +
#   geom_hline(yintercept = 0,
#              color = "grey",
#              linetype = "dashed") +
#   theme_classic() +
#   facet_grid(. ~ trial,
#              scales = "free_x")
# ggsave("sd-mass_vs_order_x_pipettor.png")
